/*
 * My OpenApi
 *
 * This API OpenApi is auto-created by using OpenApi.net and yaml file.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@support.is
 * Generated by: https://openapi-generator.tech
 */

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
using Common;
using Org.OpenAPITools.Models; //This is now the namespace of the dto's. I need to find a way to change it to Common in the dto's!
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;


namespace Web.Controllers
{ 
	[Route("api/[controller]")]
	[ApiController]
	public partial class OffersController : Controller
	{
		private readonly IOffersService service;

		public OffersController(IOffersService service)
		{
			this.service = service;
		}

		[HttpPost]
		[Route("/api/offers/add")]
		public async Task<IActionResult> AddOffer([FromBody]OfferDTO offerDTO)
	{
		try
		{
			var result = await service.AddAsync(offerDTO).ConfigureAwait(false);

			if (result.HasError)
			return BadRequest(result.ErrorMessage);

			return Ok(result.Value);
		}
		catch (Exception ex)
		{
			return StatusCode(500, ex);
		}
	}

		[HttpDelete]
		[Route("/api/offers/delete/{id}")]
		public async Task<IActionResult> DeleteOffer([FromRoute][Required]int id)
	{
		try
		{
			var result = await service.DeleteAsync(id).ConfigureAwait(false);

			if (result.HasError)
			return BadRequest(result.ErrorMessage);

			return Ok(result.Value);
		}
		catch (Exception ex)
		{
			return StatusCode(500, ex);
		}
	}

		[HttpGet]
		[Route("/api/offers")]
		public async Task<IActionResult> GetAllOffers()
	{
		try
		{
			var result = await service.GetAllAsync().ConfigureAwait(false);

			if (result.HasError)
			return BadRequest(result.ErrorMessage);

			return Ok(result.Value);
		}
		catch (Exception ex)
		{
			return StatusCode(500, ex);
		}
	}

		[HttpGet]
		[Route("/api/offers/{id}")]
		public async Task<IActionResult> GetByIdOffers([FromRoute][Required]int id)
	{
		try
		{
			var result = await service.GetByIdAsync(id).ConfigureAwait(false);

			if (result.HasError)
			return BadRequest(result.ErrorMessage);

			return Ok(result.Value);
		}
		catch (Exception ex)
		{
			return StatusCode(500, ex);
		}
	}

		[HttpPut]
		[Route("/api/offers/update")]
		public async Task<IActionResult> UpdateOffer([FromBody]OfferDTO offerDTO)
	{
		try
		{
			var result = await service.UpdateAsync(offerDTO).ConfigureAwait(false);

			if (result.HasError)
			return BadRequest(result.ErrorMessage);

			return Ok(result.Value);
		}
		catch (Exception ex)
		{
			return StatusCode(500, ex);
		}
	}

	}
	}
