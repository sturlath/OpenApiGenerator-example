openapi: 3.0.1
info:
  title: My OpenApi
  description: This API OpenApi is auto-created by using OpenApi.net and yaml file.
  contact:
    name: Support center
    url: https://support.support.is
    email: support@support.is
  license:
    name: GPL-3.0
    url: https://opensource.org/licenses/GPL-3.0
  version: 1.0.0
servers:
  - url: https://support.is/api
    description: ''
paths:
  /offers:
    get:
      tags:
        - offers
      summary: GetAll
      description: Get all Offers
      operationId: getAllOffers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/offers/{id}':
    get:
      tags:
        - offers
      summary: GetById
      description: Get an Offer by id
      operationId: getByIdOffers
      parameters:
        - name: id
          in: path
          description: The id of Offer that is asked for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  /offers/add:
    post:
      tags:
        - offers
      summary: Add
      description: Add an Offer
      operationId: addOffer
      requestBody:
        description: Offer to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offerDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  /offers/update:
    put:
      tags:
        - offers
      summary: Update
      description: Update an Offer
      operationId: updateOffer
      requestBody:
        description: Offer to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offerDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/offers/delete/{id}':
    delete:
      tags:
        - offers
      summary: Delete
      description: Deletes a Offer with certain id
      operationId: deleteOffer
      parameters:
        - name: id
          in: path
          description: The id of Offer that is going to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  /srequest:
    get:
      tags:
        - srequest
      summary: GetAll
      description: Get all sRequests
      operationId: getAllsRequests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/quotes/{id}':
    get:
      tags:
        - quotes
      summary: GetById
      description: Get an Quote by id
      operationId: getByIdQuotes
      parameters:
        - name: id
          in: path
          description: The id of Quote that is asked for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  /quotes/add:
    post:
      tags:
        - quotes
      summary: Add
      description: Add an Quote
      operationId: addQuote
      requestBody:
        description: Quote to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/srequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  /quotes/update:
    put:
      tags:
        - quotes
      summary: Update
      description: Update an Quote
      operationId: updateQuote
      requestBody:
        description: Quote to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/srequestDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/quotes/delete/{id}':
    delete:
      tags:
        - quotes
      summary: Delete
      description: Deletes a Quote with certain id
      operationId: deleteQuote
      parameters:
        - name: id
          in: path
          description: The id of Quote that is going to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/srequestDTO'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: unexpected server error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/errorModel'
components:
  schemas:
    offerDTO:
      required:
        - title
        - amountOffered
      type: object
      properties:
        id:
          type: integer
          format: int32
        requestsRequestId:
          type: integer
          format: int32
        title:
          type: string
        user:
          $ref: '#/components/schemas/userDTO'
        amountOffered:
          type: number
          format: decimal
        currency:
          type: string
        comment:
          type: string
        veacleDetails:
          $ref: '#/components/schemas/veacleDetailsDTO'
        expireDateOfOffer:
          type: string
          format: date
          nullable: true
      description: The offer from the company.
    srequestDTO:
      required:
        - isRoundTrip
      type: object
      properties:
        id:
          type: integer
          format: int32
        pickup:
          $ref: '#/components/schemas/destinationDTO'
        dropOff:
          $ref: '#/components/schemas/destinationDTO'
        isRoundTrip:
          type: boolean
        isPickup:
          type: boolean
        journeyType:
          $ref: '#/components/schemas/journeyType'
        veacleType:
          $ref: '#/components/schemas/veacleType'
        expireDateOfsRequest:
          type: string
          format: date
        luggageType:
          $ref: '#/components/schemas/luggageType'
        numberOfPassengers:
          type: integer
          format: int32
        mainContact:
          $ref: '#/components/schemas/userDTO'
        substituteContact:
          $ref: '#/components/schemas/userDTO'
        comment:
          type: string
        hasAcceptedAOffer:
          type: boolean
          nullable: true
        acceptedOfferId:
          type: integer
          format: int32
      description: What the customer of a s uses to get then get an offer.
    userDTO:
      required:
        - id
        - userType
        - firstName
      type: object
      properties:
        id:
          type: integer
          format: int32
        userType:
          $ref: '#/components/schemas/userType'
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        mobile:
          type: string
        workPhone:
          type: string
        url:
          type: string
          description: Url to the s station
    veacleDetailsDTO:
      required:
        - id
        - userType
        - firstName
      type: object
      properties:
        id:
          type: integer
          format: int32
        veacleType:
          $ref: '#/components/schemas/veacleType'
        image1:
          type: string
          format: byte
        image2:
          type: string
          format: byte
        image3:
          type: string
          format: byte
        imagesUrl:
          type: string
    destinationDTO:
      required:
        - id
        - isPickup
        - date
        - address
      type: object
      properties:
        id:
          type: integer
          format: int32
        isPickup:
          type: boolean
        address:
          type: string
        date:
          type: string
          format: date
        gpsCoordinate:
          $ref: '#/components/schemas/gpsCoordinateDTO'
      description: The pickup and drop off information.
    gpsCoordinateDTO:
      required:
        - id
        - latitude
        - longitude
      type: object
      properties:
        id:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    userType:
      enum:
        - NotSet
        - Person
        - Company
      type: string
      description: Type of user
    veacleType:
      enum:
        - NotSet
        - s
        - Limousine
      type: string
      description: Type of veacle
    journeyType:
      enum:
        - NotSet
        - AirPortTransfer
        - siness
        - Government
        - StagHenParty
        - Wedding
        - ElementarySchool
        - HighSchool
        - University
      type: string
      description: Type of journey
    luggageType:
      enum:
        - NotSet
        - UnderStorage
        - CarrieOn
      type: string
      description: Type of luggage
    errorModel:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string