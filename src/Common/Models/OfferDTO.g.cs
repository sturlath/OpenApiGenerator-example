/*
 * My OpenApi
 *
 * This API OpenApi is auto-created by using OpenApi.net and yaml file.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@support.is
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;


namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The offer from the company.
    /// </summary>
    [DataContract]
    public partial class OfferDTO : IEquatable<OfferDTO>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets RequestsRequestId
        /// </summary>
        [DataMember(Name="requestsRequestId", EmitDefaultValue=false)]
        public int RequestsRequestId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }


        /// <summary>
        /// Gets or Sets AmountOffered
        /// </summary>
        [Required]
        [DataMember(Name="amountOffered", EmitDefaultValue=false)]
        public decimal AmountOffered { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }


        /// <summary>
        /// Gets or Sets ExpireDateOfOffer
        /// </summary>
        [DataMember(Name="expireDateOfOffer", EmitDefaultValue=true)]
        public DateTime? ExpireDateOfOffer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OfferDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequestsRequestId: ").Append(RequestsRequestId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  AmountOffered: ").Append(AmountOffered).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExpireDateOfOffer: ").Append(ExpireDateOfOffer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OfferDTO)obj);
        }

        /// <summary>
        /// Returns true if OfferDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of OfferDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OfferDTO other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    RequestsRequestId == other.RequestsRequestId ||
                    
                    RequestsRequestId.Equals(other.RequestsRequestId)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    AmountOffered == other.AmountOffered ||
                    
                    AmountOffered.Equals(other.AmountOffered)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    ExpireDateOfOffer == other.ExpireDateOfOffer ||
                    ExpireDateOfOffer != null &&
                    ExpireDateOfOffer.Equals(other.ExpireDateOfOffer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequestsRequestId.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();

                    
                    hashCode = hashCode * 59 + AmountOffered.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (ExpireDateOfOffer != null)
                    hashCode = hashCode * 59 + ExpireDateOfOffer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OfferDTO left, OfferDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OfferDTO left, OfferDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
